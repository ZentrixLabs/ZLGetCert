name: Build, Sign, and Release ZLGetCert

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  actions: read
  contents: write
  packages: write
  id-token: write

env:
  SIGN_CODE: false # Disable code signing temporarily
  BASE_DIR: ${{ github.workspace }}
  ARTIFACTS_DIR: ${{ github.workspace }}\artifacts
  TEMP_DIR: ${{ github.workspace }}\artifacts\temp
  SolutionPath: ${{ github.workspace }}\ZLGetCert.sln
  ZLGetCertBin: ${{ github.workspace }}\ZLGetCert\bin\Release
  ZLGetCertExe: ${{ github.workspace }}\ZLGetCert\bin\Release\ZLGetCert.exe
  ZLGetCertInstallerExe: ${{ github.workspace }}\artifacts\ZLGetCertInstaller.exe
  RCEDIT_PATH: ${{ github.workspace }}\tools\rcedit\rcedit-x64.exe

jobs:
  build-sign-release:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        run: |
          $version = "${{ github.ref_name }}"
          $version = $version -replace '^v', ''
          echo "APP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: powershell

      - name: Debug APP_VERSION
        run: echo "APP_VERSION is ${{ env.APP_VERSION }}"
        shell: powershell

      - name: Debug repository structure
        run: dir "${{ github.workspace }}" -Recurse
        shell: powershell

      - name: Delay to ensure checkout completes
        run: Start-Sleep -Seconds 5
        shell: powershell

      - name: Verify solution file exists
        run: |
          if (Test-Path "${{ env.SolutionPath }}") {
            Write-Output "Solution file exists at ${{ env.SolutionPath }}"
          } else {
            Write-Error "Solution file does not exist at ${{ env.SolutionPath }}"
            exit 1
          }
        shell: powershell

      - name: Download NuGet CLI
        run: |
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
        shell: powershell

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Create artifacts directory
        run: New-Item -ItemType Directory -Force -Path "${{ env.ARTIFACTS_DIR }}"
        shell: powershell

      - name: Create temp directory for signing
        run: New-Item -ItemType Directory -Force -Path "${{ env.TEMP_DIR }}"
        shell: powershell

      - name: Create tools directory for rcedit
        run: New-Item -ItemType Directory -Force -Path "tools\rcedit"
        shell: powershell

      - name: Download rcedit
        run: |
          Invoke-WebRequest -Uri "https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe" -OutFile "${{ env.RCEDIT_PATH }}"
        shell: powershell

      - name: Restore NuGet packages with nuget.exe
        run: |
          .\nuget.exe restore "${{ env.SolutionPath }}" -Verbosity detailed
        shell: powershell
        continue-on-error: true

      - name: Restore NuGet packages with msbuild
        run: msbuild "${{ env.SolutionPath }}" -t:Restore -p:Configuration=Release -p:Platform="Any CPU"
        shell: powershell

      - name: Build ZLGetCert
        run: msbuild "${{ env.SolutionPath }}" /p:Configuration=Release /p:Platform="Any CPU"
        shell: powershell

      - name: Debug build output directory before stamping
        run: dir "${{ env.ZLGetCertBin }}" -Recurse
        shell: powershell
        continue-on-error: true

      - name: Stamp version into ZLGetCert.exe
        run: |
          & "${{ env.RCEDIT_PATH }}" "${{ env.ZLGetCertExe }}" --set-version-string "ProductVersion" "${{ env.APP_VERSION }}"
          & "${{ env.RCEDIT_PATH }}" "${{ env.ZLGetCertExe }}" --set-version-string "FileVersion" "${{ env.APP_VERSION }}"
        shell: powershell

      - name: Rebuild ZLGetCert project after stamping
        run: msbuild "${{ env.SolutionPath }}" /p:Configuration=Release /p:Platform="Any CPU"
        shell: powershell

      - name: Conditionally sign ZLGetCert.exe
        if: env.SIGN_CODE == 'true'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.CODESIGN_USERNAME }}
          password: ${{ secrets.CODESIGN_PASSWORD }}
          credential_id: ${{ secrets.CODESIGN_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.CODESIGN_TOTP_SECRET }}
          file_path: ${{ env.ZLGetCertExe }}
          output_path: ${{ env.TEMP_DIR }}
          environment_name: PROD
          signing_method: v2
          malware_block: false
        timeout-minutes: 10

      - name: Debug CodeSignTool version and output
        if: failure() && env.SIGN_CODE == 'true'
        run: |
          Write-Host "Code signing failed for ZLGetCert.exe"
          Write-Host "Checking if file exists: ${{ env.ZLGetCertExe }}"
          if (Test-Path "${{ env.ZLGetCertExe }}") {
            Write-Host "File exists, size: $((Get-Item '${{ env.ZLGetCertExe }}').Length) bytes"
          } else {
            Write-Host "File does not exist"
          }
        shell: powershell
        continue-on-error: true

      - name: Replace ZLGetCert.exe with signed version
        if: env.SIGN_CODE == 'true'
        run: Copy-Item "${{ env.TEMP_DIR }}\ZLGetCert.exe" "${{ env.ZLGetCertExe }}" -Force
        shell: powershell

      - name: Download and Install Inno Setup
        run: |
          Invoke-WebRequest -Uri https://jrsoftware.org/download.php/is.exe -OutFile inno-setup-installer.exe
          Start-Process -FilePath .\inno-setup-installer.exe -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
        shell: powershell

      - name: Debug - Check if icon file exists before copying
        run: |
          Write-Host "Checking for icon file in various locations..."
          $possiblePaths = @(
            "${{ github.workspace }}\ZLGetCert\ZLGetCert\ZLGetCert_icon_v2.ico",
            "ZLGetCert\ZLGetCert\ZLGetCert_icon_v2.ico",
            "\ZLGetCert\ZLGetCert\ZLGetCert_icon_v2.ico"
          )
          
          foreach ($path in $possiblePaths) {
            Write-Host "Checking: $path"
            if (Test-Path $path) {
              Write-Host "Found icon file at: $path"
              $fileInfo = Get-Item $path
              Write-Host "  Size: $($fileInfo.Length) bytes"
              Write-Host "  Last modified: $($fileInfo.LastWriteTime)"
            } else {
              Write-Host "Not found at: $path"
            }
          }
          
          Write-Host "Current working directory: $(Get-Location)"
          Write-Host "Contents of current directory:"
          Get-ChildItem | Format-Table Name, Length, LastWriteTime
        shell: powershell

      - name: Copy ZLGetCert_icon_v2.ico to working directory
        run: Copy-Item "${{ github.workspace }}\ZLGetCert\ZLGetCert_icon_v2.ico" -Destination "ZLGetCert_icon_v2.ico"
        shell: powershell

      - name: Delay to ensure build outputs are accessible
        run: Start-Sleep -Seconds 5
        shell: powershell

      - name: Verify ZLGetCert_icon_v2.ico exists in working directory
        run: |
          if (Test-Path "ZLGetCert_icon_v2.ico") {
            Write-Output "ZLGetCert_icon_v2.ico exists in working directory"
          } else {
            Write-Error "ZLGetCert_icon_v2.ico does not exist in working directory"
            exit 1
          }
        shell: powershell

      - name: Build Inno Setup Installer
        run: |
          $env:Path += ";C:\Program Files (x86)\Inno Setup 6"
          ISCC.exe "ZLGetCertSetup.iss" /DMyAppVersion="${{ env.APP_VERSION }}" > "${{ env.ARTIFACTS_DIR }}\iscc.log" 2>&1
          if ($LASTEXITCODE -ne 0) {
            Get-Content "${{ env.ARTIFACTS_DIR }}\iscc.log"
            exit $LASTEXITCODE
          }
        shell: powershell

      - name: Debug artifacts directory
        run: dir "${{ env.ARTIFACTS_DIR }}" -Recurse
        shell: powershell
        continue-on-error: true

      - name: Conditionally sign ZLGetCertInstaller.exe
        if: env.SIGN_CODE == 'true'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.CODESIGN_USERNAME }}
          password: ${{ secrets.CODESIGN_PASSWORD }}
          credential_id: ${{ secrets.CODESIGN_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.CODESIGN_TOTP_SECRET }}
          file_path: ${{ env.ZLGetCertInstallerExe }}
          output_path: ${{ env.TEMP_DIR }}
          environment_name: PROD
          signing_method: v2
          malware_block: false
        timeout-minutes: 10

      - name: Debug CodeSignTool version and output (ZLGetCertInstaller)
        if: failure() && env.SIGN_CODE == 'true'
        run: |
          Write-Host "Code signing failed for ZLGetCertInstaller.exe"
          Write-Host "Checking if file exists: ${{ env.ZLGetCertInstallerExe }}"
          if (Test-Path "${{ env.ZLGetCertInstallerExe }}") {
            Write-Host "File exists, size: $((Get-Item '${{ env.ZLGetCertInstallerExe }}').Length) bytes"
          } else {
            Write-Host "File does not exist"
          }
        shell: powershell
        continue-on-error: true

      - name: Replace ZLGetCertInstaller.exe with signed version
        if: env.SIGN_CODE == 'true'
        run: Copy-Item "${{ env.TEMP_DIR }}\ZLGetCertInstaller.exe" "${{ env.ZLGetCertInstallerExe }}" -Force
        shell: powershell

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZLGetCert-Installer
          path: ${{ env.ZLGetCertInstallerExe }}
          retention-days: 7

  release:
    needs: build-sign-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git log

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ZLGetCert-Installer
          path: artifacts

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Just use the last commit message as release notes
          git log -1 --pretty=format:"%s" > release_notes.md
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "For silent installation:" >> release_notes.md
          echo "ZLGetCertInstaller.exe /VERYSILENT /NORESTART /SUPPRESSMSGBOXES" >> release_notes.md
          
          # Output the release notes
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/ZLGetCertInstaller.exe
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
